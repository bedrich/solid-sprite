#!/usr/bin/env node

var fs = require('fs');
var colors = require('colors');
var exec = require('child_process').exec;

var dir = process.cwd() + '/' + process.argv[2];
var opts = {
	output: dir + (process.argv[3] || 'sprite.png'),
	grid: 24,
	gap: 100
};

if (!fs.existsSync(dir)) {
	console.log('Image directory not found'.red);
	process.exit(1);
}

var images = fs.readdirSync(dir).map(function(img) { return dir + img; });
var images_metadata;

exec('gm identify ' + images.join(' '), function (err, stdout, stderr) {
	if (err) throw err;
	images_metadata = formatIdentify(stdout.split('\n'));

	exec('gm convert ' + formatMontageArgs(images_metadata, opts), function (err, stdout, stderr) {
		if (err) throw err;

		console.log('Sprite image successfully created.'.green);
	});
});

function formatIdentify (id_arr) {
	var id_formatted = [];

	for (var i = 0, len= id_arr.length; i < len; i++) {
		var id_info = id_arr[i].split(' ');

		if (id_info.length > 1) {
			var dimensions = id_info[2].substring(0, id_info[2].indexOf('+'));
			id_formatted.push({
				'filepath': (i > 0) ? id_info[0].slice(0, -(2 + i.toString().length)) : id_info[0], // removes "[i]" from end of string
				'filetype': id_info[1],
				'size': {
					'h': dimensions.split('x')[1],
					'w': dimensions.split('x')[0]
				}
			});
		}
	}

	return id_formatted;
}

function formatMontageArgs(imgs, opts) {
	var args = [];
	var yPos = 0;

	for (var i = 0, len = imgs.length; i < len; i++) {
		var img = imgs[i];
		args.push(
			'-page',
			'+' + opts.gap + '+' + yPos,
			img.filepath);

		if (img.size.h > opts.grid) {
			yPos += Math.ceil(img.size.h / opts.grid) * opts.grid;
		} else {
			yPos += opts.grid;
		}
	}

	args.push(
		'-mosaic',
		'-background',
		'none',
		opts.output);
	return args.join(' ');
}