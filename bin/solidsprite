#!/usr/bin/env node

var fs = require('fs');
var colors = require('colors');
var exec = require('child_process').exec;
var path = require('path');

var args = process.argv.slice(2);
var opts = {
	grid: 30,
	gap: 100,
	input: path.resolve(process.cwd(), args[0]),
	output: path.resolve(process.cwd(), args[1]),
	trim: (args[2] && args[2] === '-trim') ? true : false
};

if (!fs.existsSync(opts.input)) {
	console.log('✖ '.red + opts.input + ' does not exist.');
	process.exit(1);
} else {
	opts.images = fs.readdirSync(opts.input).map(function(img) { return opts.input + '/' + img; });
}

if (!opts.trim) {
	createSprite();
} else {
	trimImages(createSprite);
}

function trimImages (cb) {
	console.log('‣' + ' Trimming images...');
	exec('mogrify -trim +repage ' + opts.images.join(' '), function (err, stdout, stderr) {
		if (err) throw err;
		console.log('✓'.green + ' Trimming completed');
		cb.call();
	});
}

function createSprite () {
	console.log('‣' + ' Piecing sprite together...');
	exec('identify ' + opts.images.join(' '), function (err, stdout, stderr) {
		if (err) throw err;
		var images_metadata = formatIdentify(stdout.split('\n'));

		exec('convert ' + formatMontageArgs(images_metadata), function (err, stdout, stderr) {
			if (err) throw err;
			console.log('✓'.green + ' Sprite completed.');
			console.log('‣ ' + opts.output);
		});
	});
}

function formatIdentify (id_arr) {
	var id_formatted = [];

	for (var i = 0, len= id_arr.length; i < len; i++) {
		var id_info = id_arr[i].split(' ');

		if (id_info.length > 1) {
			id_formatted.push({
				'filepath': (i > 0) ? id_info[0].slice(0, -(2 + i.toString().length)) : id_info[0], // removes "[i]" from end of string
				'filetype': id_info[1],
				'size': {
					'h': id_info[2].split('x')[1],
					'w': id_info[2].split('x')[0]
				}
			});
		}
	}

	return id_formatted;
}

function formatMontageArgs(imgs) {
	var args = [];
	var y_pos = 0;

	for (var i = 0, len = imgs.length; i < len; i++) {
		var img = imgs[i];
		args.push(
			'-background',
			'black',
			'-pointsize',
			'11',
			'-font',
			'verdana',
			'-fill',
			'white',
			'-page',
			['+0+', y_pos].join(''),
			['label:', '[', (y_pos / opts.grid), ']', img.size.w, 'x', img.size.h].join(''),
			'-page',
			['+', opts.gap, '+', y_pos].join(''),
			img.filepath);

		if (img.size.h > opts.grid) {
			y_pos += Math.ceil(img.size.h / opts.grid) * opts.grid;
		} else {
			y_pos += opts.grid;
		}
	}

	args.push(
		'-background',
		'none',
		'-mosaic',
		opts.output);
	return args.join(' ');
}